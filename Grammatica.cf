-- BNFC sources for a simple Imperative Language
--
-- The idea of this example is to show how to quickly realize a prototype
-- of a Lexer and a Parser for a programming language.  With the running
-- prototype we can test if the concrete grammar behaves as expected.
-- Then, by small manual refinements of the grammar and adaptations of the
-- production's actions directly on the Happy/Bison sources, we can
-- generate a better Parser, with less effort than a direct approach.
--
-- Written by Marco Comini


comment "//" ;
comment "/*" "*/" ;

entrypoints Program, Stmt, RExpr, LExpr ;

rules Boolean ::= "true" | "false" ; -- Il professore ha specificato true e false, case sensitive

coercions   RExpr 14 ;

Or.         RExpr ::= RExpr "||" RExpr1 ;

And.        RExpr1 ::= RExpr1 "&&" RExpr2 ;

Not.        RExpr2 ::= "!" RExpr3 ;

Eq.         RExpr5 ::= RExpr6 "==" RExpr6 ;
Neq.        RExpr5 ::= RExpr6 "!=" RExpr6 ;
Lt.         RExpr5 ::= RExpr6 "<"  RExpr6 ;
LtE.        RExpr5 ::= RExpr6 "<=" RExpr6 ;
Gt.         RExpr5 ::= RExpr6 ">"  RExpr6 ;
GtE.        RExpr5 ::= RExpr6 ">=" RExpr6 ;

Add.        RExpr7 ::= RExpr7 "+" RExpr8 ;
Sub.        RExpr7 ::= RExpr7 "-" RExpr8 ;

Mul.        RExpr8 ::= RExpr8 "*" RExpr9 ;
Div.        RExpr8 ::= RExpr8 "/" RExpr9 ;
Mod.        RExpr8 ::= RExpr8 "%" RExpr9 ;

Pow.        RExpr9 ::= RExpr10 "^" RExpr9 ;

Neg.        RExpr11 ::= "-" RExpr12 ;
Ref.        RExpr11 ::= "&" LExpr ;

FCall.      RExpr12 ::= FunCall ;

Int.        RExpr13 ::= Integer ;
Char.       RExpr13 ::= Char ;
String.     RExpr13 ::= String ;
Float.      RExpr13 ::= Double ;
Bool.       RExpr13 ::= Boolean ;

Lexpr.      RExpr14 ::= LExpr ;

Call.       FunCall ::= Ident "(" [RExpr] ")" ;

separator   RExpr "," ;

coercions   LExpr 2 ;

Deref.      LExpr ::= "*" RExpr ;
PreInc.     LExpr ::= "++" LExpr1 ;
PreDecr.    LExpr ::= "--" LExpr1 ;

PostInc.    LExpr1 ::= LExpr2 "++" ;
PostDecr.   LExpr1 ::= LExpr2 "--" ;

BasLExpr.   LExpr2 ::= BLExpr ;

ArrayEl.    BLExpr ::= BLExpr "[" RExpr "]" ;
Id.         BLExpr ::= Ident ;


Prog.       Program ::= [Decl] ;

separator   Decl "" ;

DvarBInit.   Decl ::= BasicType [VarDeclInit] ";" ;
DvarCInit.   Decl ::= TypeSpec  [VarDeclInit] ";" ;

separator nonempty VarDeclInit "," ;

BasTyp.     TypeSpec ::= BasicType ;
rules BasicType ::= "bool" | "char" | "float" | "int" ; -- Il tipo void non è specificato

CompType.   TypeSpec ::= CompoundType ;
ArrDef.     CompoundType ::= TypeSpec "[" Integer "]" ;
ArrUnDef.   CompoundType ::= TypeSpec "["  "]" ;
Pointer.    CompoundType ::= TypeSpec "*" ;

VarDeclIn.   VarDeclInit ::= Ident "=" ComplexRExpr ;
Simple.      ComplexRExpr ::= RExpr ;
Array.       ComplexRExpr ::= "[" [ComplexRExpr] "]" ;

separator nonempty ComplexRExpr "," ;

Dfun.       Decl ::= BasicType Ident "(" [Parameter] ")" CompStmt ;

separator   Parameter "," ;

Param.      Parameter ::=  TypeSpec Ident ; -- Questa modifica perchè il professore ha richiesto passaggio per valore



rules   CompStmt ::= CompStmtNocolon ";"  | CompStmtNocolon ;

BlockDecl.  CompStmtNocolon ::= "{" [Decl] [Stmt] "}" ;

separator Stmt "" ;


-- Statement
Comp.       Stmt ::= CompStmt ;
ProcCall.   Stmt ::= FunCall ";" ;
Jmp.        Stmt ::= JumpStmt ";" ;
Iter.       Stmt ::= IterStmt ;
Sel.        Stmt ::= SelectionStmt ;
Assgn.      Stmt ::= LExpr Assignment_op RExpr ";" ;
LExprStmt.  Stmt ::= LExpr ";" ;

Assign.     Assignment_op ::= "=" ;
AssgnMul.   Assignment_op ::= "*=" ;
AssgnAdd.   Assignment_op ::= "+=" ;
AssgnDiv.   Assignment_op ::= "/=" ;
AssgnSub.   Assignment_op ::= "-=" ;
AssgnPow.   Assignment_op ::= "^=" ;
AssgnAnd.   Assignment_op ::= "&=" ;
AssgnOr.    Assignment_op ::= "|=" ;


Break.      JumpStmt ::= "break" ;
Continue.   JumpStmt ::= "continue" ;
RetExpVoid.     JumpStmt ::= "return" ;
RetExp.     JumpStmt ::= "return" "(" RExpr ")" ;


IfNoElse.   SelectionStmt ::= "if" "(" RExpr ")" Stmt ; -- Giustificare la scelta della sintassi, Go non ha le parentesi
IfElse.     SelectionStmt ::= "if" "(" RExpr ")" Stmt "else" Stmt ;


While.        IterStmt ::= "while" "(" RExpr ")" Stmt ;
DoWhile.      IterStmt ::= "do" Stmt "while" "(" RExpr ")" ";" ; -- do While non specificato, inoltre come controllo di flusso Go non ammette il while ma gestisce tutto con il for, decidere!

-- Built-in functions (predefined identifiers) -- Motivare la scelta, non è necessario definirli come token, facendo così l'utente non può ridefinire 
token WriteInt    {"writeInt"} ;
token WriteFloat  {"writeFloat"} ;
token WriteChar   {"writeChar"} ;
token WriteString {"writeString"} ;
token ReadInt     {"readInt"} ;
token ReadFloat   {"readFloat"} ;
token ReadChar    {"readChar"} ;
token ReadString  {"readString"} ;

